package speiger.src.tests.PACKAGE.collections;

import java.util.Arrays;
import java.util.Collection;
import java.util.function.Function;
#if TYPE_BOOLEAN
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
#endif

import com.google.common.collect.testing.features.CollectionSize;
#if !TYPE_BOOLEAN
import com.google.common.collect.testing.features.CollectionFeature;
#endif
import com.google.common.collect.testing.features.ListFeature;
import com.google.common.collect.testing.features.Feature;

#if TYPE_BOOLEAN
import com.google.common.collect.testing.testers.CollectionAddAllTester;
import com.google.common.collect.testing.testers.CollectionAddTester;
import com.google.common.collect.testing.testers.CollectionContainsAllTester;
import com.google.common.collect.testing.testers.CollectionContainsTester;
import com.google.common.collect.testing.testers.CollectionIteratorTester;
import com.google.common.collect.testing.testers.CollectionRemoveAllTester;
import com.google.common.collect.testing.testers.CollectionRemoveTester;
import com.google.common.collect.testing.testers.CollectionRetainAllTester;
import com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
import com.google.common.collect.testing.testers.ListAddAtIndexTester;
import com.google.common.collect.testing.testers.ListEqualsTester;
import com.google.common.collect.testing.testers.ListIndexOfTester;
import com.google.common.collect.testing.testers.ListLastIndexOfTester;
import com.google.common.collect.testing.testers.ListRetainAllTester;
import com.google.common.collect.testing.testers.ListSubListTester;
#else
import com.google.common.collect.testing.testers.ListSubListTester;
#endif

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import speiger.src.collections.PACKAGE.lists.IMMUTABLE_LIST;
import speiger.src.collections.PACKAGE.lists.ARRAY_LIST;
import speiger.src.collections.PACKAGE.lists.LINKED_LIST;
import speiger.src.collections.PACKAGE.lists.COPY_ON_WRITE_LIST;
import speiger.src.collections.PACKAGE.lists.LIST;

#if !TYPE_BOOLEAN
import speiger.src.collections.PACKAGE.utils.LISTS;
#endif
import speiger.src.testers.PACKAGE.builder.LIST_TEST_BUILDER;
import speiger.src.testers.PACKAGE.impl.COLLECTION_CONSTRUCTOR_TESTS;
import speiger.src.testers.PACKAGE.impl.SIMPLE_TEST_GENERATOR;
#if TYPE_OBJECT
import speiger.src.testers.PACKAGE.generators.TEST_LIST_GENERATOR;
#endif
import speiger.src.testers.utils.SpecialFeature;
import speiger.src.testers.utils.TestUtils;
#if TYPE_BOOLEAN
import speiger.src.testers.booleans.tests.collection.BooleanCollectionAddAllArrayTester;
import speiger.src.testers.booleans.tests.collection.BooleanCollectionAddAllTester;
import speiger.src.testers.booleans.tests.collection.BooleanCollectionAddTester;
import speiger.src.testers.booleans.tests.collection.BooleanCollectionContainsAllTester;
import speiger.src.testers.booleans.tests.collection.BooleanCollectionContainsTester;
import speiger.src.testers.booleans.tests.collection.BooleanCollectionIteratorTester;
import speiger.src.testers.booleans.tests.collection.BooleanCollectionRemoveAllTester;
import speiger.src.testers.booleans.tests.collection.BooleanCollectionRetainAllTester;
import speiger.src.testers.booleans.tests.list.BooleanListAddAllArrayAtIndexTester;
import speiger.src.testers.booleans.tests.list.BooleanListAddAllAtIndexTester;
import speiger.src.testers.booleans.tests.list.BooleanListAddAtIndexTester;
import speiger.src.testers.booleans.tests.list.BooleanListEqualsTester;
import speiger.src.testers.booleans.tests.list.BooleanListExtractElementsTester;
import speiger.src.testers.booleans.tests.list.BooleanListIndexOfTester;
import speiger.src.testers.booleans.tests.list.BooleanListLastIndexOfTester;
import speiger.src.testers.booleans.tests.list.BooleanListRemoveElementsTester;
import speiger.src.testers.booleans.tests.list.BooleanListRetainAllTester;
import speiger.src.testers.booleans.tests.list.BooleanListSubListTester;
#else
import speiger.src.testers.PACKAGE.tests.list.FILE_KEY_TYPEListSubListTester;
#endif


@SuppressWarnings("javadoc")
public class LIST_TESTS extends TestCase
{
	public static Test suite() {
		TestSuite suite = new TestSuite("LISTS");
		suite(suite);
		constructorSuite(suite);
		System.out.println("Generated ["+suite.countTestCases()+"] Tests");
		return suite;
	}
	
	public static void constructorSuite(TestSuite suite) {
		TestSuite constructors = new TestSuite("Constructors");
		constructors.addTest(new TestSuite(COLLECTION_CONSTRUCTOR_TESTS.ArrayList.class));
		constructors.addTest(new TestSuite(COLLECTION_CONSTRUCTOR_TESTS.LinkedList.class));
		constructors.addTest(new TestSuite(COLLECTION_CONSTRUCTOR_TESTS.CopyOnWriteArrayList.class));
		constructors.addTest(new TestSuite(COLLECTION_CONSTRUCTOR_TESTS.ImmutableList.class));
		suite.addTest(constructors);
	}
	
#if TYPE_OBJECT
	public static void suite(TestSuite suite) {
		suite.addTest(listSuite("ARRAY_LIST", T -> new ARRAY_LISTBRACES(T), getFeatures(), -1));
		suite.addTest(listSuite("LINKED_LIST", T -> new LINKED_LISTBRACES(T), getFeatures(), -1));
		suite.addTest(copyOnWritelistSuite("COPY_ON_WRITE_LIST", T -> new COPY_ON_WRITE_LISTBRACES(T), getCopyOnWriteFeatures(), -1));
		suite.addTest(listSuite("IMMUTABLE_LIST", T -> new IMMUTABLE_LISTBRACES(T), getImmutableFeatures(), -1));
		suite.addTest(listSuite("Synchronized ARRAY_LIST", T -> new ARRAY_LISTBRACES(T).synchronize(), getFeatures(), -1));
		suite.addTest(listSuite("Unmodifiable ARRAY_LIST", T -> new ARRAY_LISTBRACES(T).unmodifiable(), getImmutableFeatures(), -1));
		suite.addTest(emptylistSuite("Empty LIST", T -> LISTS.empty(), getImmutableWrapperFeatures(), 0));
		suite.addTest(listSuite("Singleton LIST", T -> LISTS.singleton(T[0]), getImmutableWrapperFeatures(), 1));
	}
	
	private static Test listSuite(String name, Function<KEY_STRING_TYPE[], LIST KEY_STRING_GENERIC_TYPE> factory, Collection<Feature<?>> features, int size) {
		return LIST_TEST_BUILDER.using((TEST_LIST_GENERATOR KEY_STRING_GENERIC_TYPE)new SIMPLE_TEST_GENERATOR.Lists KEY_STRING_GENERIC_TYPE(factory).setElements(createStrings())).setPrefixes(createPrefixes()).setSuffixes(createSuffixes()).named(name).withFeatures(getSizes(size)).withFeatures(features).createTestSuite();
	}
	
	private static Test copyOnWritelistSuite(String name, Function<KEY_STRING_TYPE[], LIST KEY_STRING_GENERIC_TYPE> factory, Collection<Feature<?>> features, int size) {
		return LIST_TEST_BUILDER.using((TEST_LIST_GENERATOR KEY_STRING_GENERIC_TYPE)new SIMPLE_TEST_GENERATOR.Lists KEY_STRING_GENERIC_TYPE(factory).setElements(createStrings())).setPrefixes(createPrefixes()).setSuffixes(createSuffixes()).named(name).withFeatures(getSizes(size)).withFeatures(features).createTestSuite();
	}
	
	private static Test emptylistSuite(String name, Function<KEY_STRING_TYPE[], LIST KEY_STRING_GENERIC_TYPE> factory, Collection<Feature<?>> features, int size) {
		return LIST_TEST_BUILDER.using((TEST_LIST_GENERATOR KEY_STRING_GENERIC_TYPE)new SIMPLE_TEST_GENERATOR.Lists KEY_STRING_GENERIC_TYPE(factory).setElements(createStrings())).setPrefixes(createPrefixes()).setSuffixes(createSuffixes()).named(name).withFeatures(getSizes(size)).suppressing(TestUtils.getSurpession(ListSubListTester.class)).suppressing(TestUtils.getSurpession(FILE_KEY_TYPEListSubListTester.class)).withFeatures(features).createTestSuite();
	}
	
	private static String[] createStrings() {
		return new String[]{"a", "b", "c", "d", "e"};
	}
	
	private static String[] createPrefixes() {
		return new String[]{"^", "_", "`"};
	}
	
	private static String[] createSuffixes() {
		return new String[]{"f", "g", "h"};
	}
	
#else if !TYPE_BOOLEAN
	public static void suite(TestSuite suite) {
		suite.addTest(listSuite("ARRAY_LIST", ARRAY_LIST::new, getFeatures(), -1));
		suite.addTest(listSuite("LINKED_LIST", LINKED_LIST::new, getFeatures(), -1));
		suite.addTest(copyOnWritelistSuite("COPY_ON_WRITE_LIST", COPY_ON_WRITE_LIST::new, getCopyOnWriteFeatures(), -1));
		suite.addTest(listSuite("IMMUTABLE_LIST", IMMUTABLE_LIST::new, getImmutableFeatures(), -1));
		suite.addTest(listSuite("Synchronized ARRAY_LIST", T -> new ARRAY_LISTBRACES(T).synchronize(), getFeatures(), -1));
		suite.addTest(listSuite("Unmodifiable ARRAY_LIST", T -> new ARRAY_LISTBRACES(T).unmodifiable(), getImmutableFeatures(), -1));
		suite.addTest(emptylistSuite("Empty LIST", T -> LISTS.empty(), getImmutableWrapperFeatures(), 0));
		suite.addTest(listSuite("Singleton LIST", T -> LISTS.singleton(T[0]), getImmutableWrapperFeatures(), 1));
	}
	
	private static Test listSuite(String name, Function<KEY_TYPE[], LIST KEY_GENERIC_TYPE> factory, Collection<Feature<?>> features, int size) {
		return LIST_TEST_BUILDER.using(new SIMPLE_TEST_GENERATOR.ListsBRACES(factory)).named(name).withFeatures(getSizes(size)).withFeatures(features).createTestSuite();
	}
	
	private static Test copyOnWritelistSuite(String name, Function<KEY_STRING_TYPE[], LIST KEY_STRING_GENERIC_TYPE> factory, Collection<Feature<?>> features, int size) {
		return LIST_TEST_BUILDER.using(new SIMPLE_TEST_GENERATOR.Lists KEY_STRING_GENERIC_TYPE(factory)).named(name).withFeatures(getSizes(size)).withFeatures(features).createTestSuite();
	}
	
	private static Test emptylistSuite(String name, Function<KEY_STRING_TYPE[], LIST KEY_STRING_GENERIC_TYPE> factory, Collection<Feature<?>> features, int size) {
		return LIST_TEST_BUILDER.using(new SIMPLE_TEST_GENERATOR.ListsBRACES(factory)).named(name).withFeatures(getSizes(size)).suppressing(TestUtils.getSurpession(ListSubListTester.class)).suppressing(TestUtils.getSurpession(FILE_KEY_TYPEListSubListTester.class)).withFeatures(features).createTestSuite();
	}
	
#else
	public static void suite(TestSuite suite) {
		listSuite(suite, "ARRAY_LIST", ARRAY_LIST::new, getFeatures(), false, -1);
		listSuite(suite, "LINKED_LIST", LINKED_LIST::new, getFeatures(), false, -1);
		copyOnWritelistSuite(suite, "COPY_ON_WRITE_LIST", COPY_ON_WRITE_LIST::new, getCopyOnWriteFeatures(), false, -1);
		listSuite(suite, "IMMUTABLE_LIST", IMMUTABLE_LIST::new, getImmutableFeatures(), true, -1);
		listSuite(suite, "Synchronized ARRAY_LIST", T -> new ARRAY_LISTBRACES(T).synchronize(), getFeatures(), false, -1);
		listSuite(suite, "Unmodifiable ARRAY_LIST", T -> new ARRAY_LISTBRACES(T).unmodifiable(), getImmutableFeatures(), true, -1);
	}
	
	private static void copyOnWritelistSuite(TestSuite suite, String name, Function<KEY_TYPE[], LIST KEY_GENERIC_TYPE> factory, Collection<Feature<?>> features, boolean immutable, int size) {
		TestSuite data = new TestSuite(name);
		Collection<CollectionSize> sizes = getSizes(size);
#ignore
		if(sizes.contains(CollectionSize.ZERO) || sizes.contains(CollectionSize.ANY)) {
#endignore
			data.addTest(LIST_TEST_BUILDER.using(new SIMPLE_TEST_GENERATOR.ListsBRACES(factory))
#ignore
			.named(name+" [collection size: zero]").withFeatures(CollectionSize.ZERO).withFeatures(features).suppressing(getSurpression(CollectionSize.ZERO, immutable)).createTestSuite());
#endignore
		}
#ignore
		if(sizes.contains(CollectionSize.ONE) || sizes.contains(CollectionSize.ANY)) {
#endignore
			data.addTest(LIST_TEST_BUILDER.using(new SIMPLE_TEST_GENERATOR.ListsBRACES(factory))
#ignore
				.named(name+" [collection size: one]").withFeatures(CollectionSize.ONE).withFeatures(features).suppressing(getSurpression(CollectionSize.ONE, immutable)).createTestSuite());
#endignore
		}
#ignore
		if(sizes.contains(CollectionSize.SEVERAL) || sizes.contains(CollectionSize.ANY)) {
#endignore
			data.addTest(LIST_TEST_BUILDER.using(new SIMPLE_TEST_GENERATOR.ListsBRACES(factory))
#ignore
				.named(name+" [collection size: several]").withFeatures(CollectionSize.SEVERAL).withFeatures(features).suppressing(getSurpression(CollectionSize.SEVERAL, immutable)).createTestSuite());
#endignore
		}
		suite.addTest(data);
	}
	
	private static void listSuite(TestSuite suite, String name, Function<KEY_TYPE[], LIST KEY_GENERIC_TYPE> factory, Collection<Feature<?>> features, boolean immutable, int size) {
		TestSuite data = new TestSuite(name);
		Collection<CollectionSize> sizes = getSizes(size);
#ignore
		if(sizes.contains(CollectionSize.ZERO) || sizes.contains(CollectionSize.ANY)) {
#endignore
			data.addTest(LIST_TEST_BUILDER.using(new SIMPLE_TEST_GENERATOR.ListsBRACES(factory))
#ignore
			.named(name+" [collection size: zero]").withFeatures(CollectionSize.ZERO).withFeatures(features).suppressing(getSurpression(CollectionSize.ZERO, immutable)).createTestSuite());
#endignore
		}
#ignore
		if(sizes.contains(CollectionSize.ONE) || sizes.contains(CollectionSize.ANY)) {
#endignore
			data.addTest(LIST_TEST_BUILDER.using(new SIMPLE_TEST_GENERATOR.ListsBRACES(factory))
#ignore
				.named(name+" [collection size: one]").withFeatures(CollectionSize.ONE).withFeatures(features).suppressing(getSurpression(CollectionSize.ONE, immutable)).createTestSuite());
#endignore
		}
#ignore
		if(sizes.contains(CollectionSize.SEVERAL) || sizes.contains(CollectionSize.ANY)) {
#endignore
			data.addTest(LIST_TEST_BUILDER.using(new SIMPLE_TEST_GENERATOR.ListsBRACES(factory)).named(name)
#ignore
				.named(name+" [collection size: several]").withFeatures(CollectionSize.SEVERAL).withFeatures(features).suppressing(getSurpression(CollectionSize.SEVERAL, immutable)).createTestSuite());
#endignore
		}
		suite.addTest(data);
	}
	
	private static List<Method> getSurpression(CollectionSize size, boolean immutable) {
		List<Method> list = new ArrayList<>();
		if(size == CollectionSize.ONE) {
			TestUtils.getSurpession(list, CollectionRetainAllTester.class, "testRetainAll_disjointPreviouslyNonEmpty");
			if(immutable) {
				TestUtils.getSurpession(list, CollectionAddAllTester.class, "testAddAll_unsupportedNonePresent");
				TestUtils.getSurpession(list, BooleanCollectionAddAllTester.class, "testAddAll_unsupportedNonePresent");
				TestUtils.getSurpession(list, BooleanCollectionAddAllArrayTester.class, "testAddAllArray_unsupportedNonePresent");
			}
		}
		else {
			TestUtils.getSurpession(list, CollectionContainsAllTester.class, "testContainsAll_disjoint", "testContainsAll_partialOverlap");
			TestUtils.getSurpession(list, CollectionContainsTester.class, "testContains_no");
			TestUtils.getSurpession(list, CollectionIteratorTester.class, "testIterator_removeAffectsBackingCollection");
			TestUtils.getSurpession(list, CollectionRemoveAllTester.class, "testRemoveAll_nonePresent");
			TestUtils.getSurpession(list, CollectionRemoveTester.class, "testRemove_present", "testRemove_notPresent");
			TestUtils.getSurpession(list, CollectionRetainAllTester.class, "testRetainAll_disjointPreviouslyNonEmpty", "testRetainAll_containsDuplicatesSizeSeveral", "testRetainAll_partialOverlap");
			TestUtils.getSurpession(list, BooleanCollectionContainsAllTester.class, "testContainsAll_disjoint", "testContainsAll_partialOverlap");
			TestUtils.getSurpession(list, BooleanCollectionContainsTester.class, "testContains_no");
			TestUtils.getSurpession(list, BooleanCollectionIteratorTester.class, "testIterator_removeAffectsBackingCollection");
			TestUtils.getSurpession(list, BooleanCollectionRemoveAllTester.class, "testRemoveAll_nonePresentFetchRemoved", "testRemoveAll_someFetchRemovedElements", "testRemoveAll_nonePresent");
			TestUtils.getSurpession(list, BooleanCollectionRetainAllTester.class, "testRetainAllExtra_containsDuplicatesSizeSeveral", "testRetainAllExtra_partialOverlap", "testRetainAll_containsDuplicatesSizeSeveral", "testRetainAll_partialOverlap");
			TestUtils.getSurpession(list, ListAddAllAtIndexTester.class, "testAddAllAtIndex_negative", "testAddAllAtIndex_tooLarge");
			TestUtils.getSurpession(list, ListAddAtIndexTester.class, "testAddAtIndex_tooLarge", "testAddAtIndex_negative");
			TestUtils.getSurpession(list, ListEqualsTester.class, "testEquals_otherListWithDifferentElements");
			TestUtils.getSurpession(list, ListIndexOfTester.class, "testFind_no");
			TestUtils.getSurpession(list, ListLastIndexOfTester.class, "testLastIndexOf_duplicate", "testFind_no", "testFind_yes");
			TestUtils.getSurpession(list, ListRetainAllTester.class, "testRetainAll_duplicatesRemoved", "testRetainAll_countIgnored");
			TestUtils.getSurpession(list, ListSubListTester.class, "testSubList_lastIndexOf", "testSubList_contains", "testSubList_indexOf");
			TestUtils.getSurpession(list, BooleanListAddAllAtIndexTester.class, "testAddAllAtIndex_negative", "testAddAllAtIndex_tooLarge");
			TestUtils.getSurpession(list, BooleanListAddAllArrayAtIndexTester.class, "testAddAllArrayAtIndex_tooLarge", "testAddAllArrayAtIndex_negative");
			TestUtils.getSurpession(list, BooleanListAddAtIndexTester.class, "testAddAtIndex_tooLarge", "testAddAtIndex_negative");
			TestUtils.getSurpession(list, BooleanListEqualsTester.class, "testEquals_otherListWithDifferentElements");
			TestUtils.getSurpession(list, BooleanListExtractElementsTester.class, "testRemoveElements");
			TestUtils.getSurpession(list, BooleanListIndexOfTester.class, "testFind_no");
			TestUtils.getSurpession(list, BooleanListLastIndexOfTester.class, "testLastIndexOf_duplicate", "testFind_no", "testFind_yes");
			TestUtils.getSurpession(list, BooleanListRemoveElementsTester.class, "testRemoveElements");
			TestUtils.getSurpession(list, BooleanListRetainAllTester.class, "testRetainAll_duplicatesRemoved", "testRetainAll_countIgnored");
			TestUtils.getSurpession(list, BooleanListSubListTester.class, "testSubList_lastIndexOf", "testSubList_contains", "testSubList_indexOf");
			if(immutable) {
				TestUtils.getSurpession(list, CollectionAddAllTester.class, "testAddAll_unsupportedNonePresent");
				TestUtils.getSurpession(list, CollectionAddTester.class, "testAdd_unsupportedNotPresent");
				TestUtils.getSurpession(list, CollectionRemoveTester.class, "testRemove_unsupportedNotPresent");
				TestUtils.getSurpession(list, BooleanCollectionAddAllTester.class, "testAddAll_unsupportedNonePresent");
				TestUtils.getSurpession(list, BooleanCollectionAddAllArrayTester.class, "testAddAllArray_unsupportedNonePresent");
				TestUtils.getSurpession(list, BooleanCollectionAddTester.class, "testAdd_unsupportedNotPresent");
				TestUtils.getSurpession(list, ListAddAllAtIndexTester.class, "testAddAllAtIndex_unsupportedSomePresent");
				TestUtils.getSurpession(list, ListAddAtIndexTester.class, "testAddAtIndex_unsupportedNotPresent");
				TestUtils.getSurpession(list, BooleanListAddAllAtIndexTester.class, "testAddAllAtIndex_unsupportedSomePresent");
				TestUtils.getSurpession(list, BooleanListAddAllArrayAtIndexTester.class, "testAddAllArrayAtIndex_unsupportedSomePresent");
				TestUtils.getSurpession(list, BooleanListAddAtIndexTester.class, "testAddAtIndex_unsupportedNotPresent");
			}
		}
		return list;
	}
	
#endif
#ignore
	private static Collection<CollectionSize> getSizes(int size) {
		switch(size) {
			case 0: return Arrays.asList(CollectionSize.ZERO);
			case 1: return Arrays.asList(CollectionSize.ONE);
			case 2: return Arrays.asList(CollectionSize.ZERO, CollectionSize.ONE);
			case 3: return Arrays.asList(CollectionSize.SEVERAL);
			case 4: return Arrays.asList(CollectionSize.ZERO, CollectionSize.SEVERAL);
			case 5: return Arrays.asList(CollectionSize.ONE, CollectionSize.SEVERAL);
			default: return Arrays.asList(CollectionSize.ANY);
		}
	}
	
#endignore
	
	private static Collection<Feature<?>> getCopyOnWriteFeatures() {

#if TYPE_OBJECT
#ignore
		return Arrays.asList(ListFeature.SUPPORTS_SET, ListFeature.SUPPORTS_ADD_WITH_INDEX, ListFeature.SUPPORTS_REMOVE_WITH_INDEX, SpecialFeature.COPYING, CollectionFeature.ALLOWS_NULL_VALUES);
#endignore
#else
#ignore
		return Arrays.asList(ListFeature.SUPPORTS_SET, ListFeature.SUPPORTS_ADD_WITH_INDEX, ListFeature.SUPPORTS_REMOVE_WITH_INDEX, SpecialFeature.COPYING);
#endignore
#endif
	}
	
	private static Collection<Feature<?>> getImmutableFeatures() {

#if TYPE_OBJECT
#ignore
		return Arrays.asList(SpecialFeature.COPYING, CollectionFeature.ALLOWS_NULL_VALUES);
#endignore
#else
#ignore
		return Arrays.asList(SpecialFeature.COPYING);
#endignore
#endif
	}
	
#if !TYPE_BOOLEAN
	private static Collection<Feature<?>> getImmutableWrapperFeatures() {

#if TYPE_OBJECT
#ignore
		return Arrays.asList(SpecialFeature.COPYING, CollectionFeature.ALLOWS_NULL_VALUES, CollectionFeature.SUBSET_VIEW);
#endignore
#else
#ignore
		return Arrays.asList(SpecialFeature.COPYING, CollectionFeature.SUBSET_VIEW);
#endignore
#endif
	}
	
#endif
	private static Collection<Feature<?>> getFeatures() {

#if TYPE_OBJECT
#ignore
		return Arrays.asList(ListFeature.GENERAL_PURPOSE, CollectionFeature.ALLOWS_NULL_VALUES, SpecialFeature.COPYING, SpecialFeature.ITERATOR_MODIFIABLE);
#endignore
#else
#ignore
		return Arrays.asList(ListFeature.GENERAL_PURPOSE, SpecialFeature.COPYING, SpecialFeature.ITERATOR_MODIFIABLE);
#endignore
#endif
	}
}