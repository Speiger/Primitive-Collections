package speiger.src.testers.PACKAGE.impl.maps;

import speiger.src.collections.PACKAGE.maps.abstracts.ABSTRACT_MAP;
import speiger.src.collections.PACKAGE.maps.interfaces.MAP;
import speiger.src.collections.PACKAGE.maps.impl.misc.ARRAY_MAP;
import speiger.src.collections.objects.collections.ObjectIterator;
import speiger.src.collections.objects.sets.AbstractObjectSet;
import speiger.src.collections.objects.sets.ObjectSet;

@SuppressWarnings("javadoc")
public class SIMPLE_TEST_MAP KEY_VALUE_GENERIC_TYPE extends ABSTRACT_MAP KEY_VALUE_GENERIC_TYPE
{
	MAP KEY_VALUE_GENERIC_TYPE map;
	
	public SIMPLE_TEST_MAP(KEY_TYPE[] keys, VALUE_TYPE[] values) {
		map = new ARRAY_MAPKV_BRACES(keys, values);
	}
	
	@Override
	public ABSTRACT_MAP KEY_VALUE_GENERIC_TYPE setDefaultReturnValue(VALUE_TYPE v) {
		map.setDefaultReturnValue(v);
		return this;
	}
	
	@Override
	public VALUE_TYPE getDefaultReturnValue() { return map.getDefaultReturnValue(); }
	
	@Override
	public VALUE_TYPE put(KEY_TYPE key, VALUE_TYPE value) { return map.put(key, value); }
	@Override
	public VALUE_TYPE putIfAbsent(KEY_TYPE key, VALUE_TYPE value) { return map.putIfAbsent(key, value); }
#if VALUE_PRIMITIVES
	@Override
	public VALUE_TYPE addTo(KEY_TYPE key, VALUE_TYPE value) { return map.addTo(key, value); }
	@Override
	public VALUE_TYPE subFrom(KEY_TYPE key, VALUE_TYPE value) { return map.subFrom(key, value); }
#endif
	@Override
	public VALUE_TYPE REMOVE_VALUE(KEY_TYPE key) { return map.REMOVE_VALUE(key); }
	@Override
	public VALUE_TYPE REMOVE_VALUEOrDefault(KEY_TYPE key, VALUE_TYPE defaultValue) { return map.REMOVE_VALUEOrDefault(key, defaultValue); }
#if !TYPE_OBJECT || !VALUE_OBJECT
	@Override
	public boolean remove(KEY_TYPE key, VALUE_TYPE value) { return map.remove(key, value); }
#endif
	@Override
	public CLASS_VALUE_TYPE remove(Object key) { return map.remove(key); }
	@Override
	public boolean remove(Object key, Object value) { return map.remove(key, value); }
	@Override
	public VALUE_TYPE GET_VALUE(KEY_TYPE key) { return map.GET_VALUE(key); }
#if TYPE_OBJECT && !VALUE_OBJECT
	@Override
	public VALUE_TYPE getOrDefault(KEY_TYPE key, VALUE_TYPE defaultValue) { return map.getOrDefault(key, defaultValue); }
#endif
	@Override
	public ObjectSet<MAP.Entry KEY_VALUE_GENERIC_TYPE> ENTRY_SET() {
		return new AbstractObjectSet<MAP.Entry KEY_VALUE_GENERIC_TYPE>() {
			@Override
			public ObjectIterator<MAP.Entry KEY_VALUE_GENERIC_TYPE> iterator() {
				return new ObjectIterator<MAP.Entry KEY_VALUE_GENERIC_TYPE>() {
					ObjectIterator<MAP.Entry KEY_VALUE_GENERIC_TYPE> iter = map.ENTRY_SET().iterator();
					@Override
					public boolean hasNext() {
						return iter.hasNext();
					}
					
					@Override
					public MAP.Entry KEY_VALUE_GENERIC_TYPE next() {
						MAP.Entry KEY_VALUE_GENERIC_TYPE entry = iter.next();
						return new ABSTRACT_MAP.BasicEntry KEY_VALUE_GENERIC_TYPE(entry.ENTRY_KEY(), entry.ENTRY_VALUE()) {
							@Override
							public VALUE_TYPE setValue(VALUE_TYPE value) {
								return entry.setValue(value);
							}
						};
					}
					
					@Override
					public void remove() {
						iter.remove();
					}
				};
			}
			
			@Override
			public int size() {
				return map.size();
			}
		};
	}
}