package speiger.src.testers.PACKAGE.impl;

import java.util.List;
import java.util.function.Function;

import speiger.src.collections.PACKAGE.collections.ITERABLE;
import speiger.src.collections.PACKAGE.lists.LIST;
import speiger.src.collections.PACKAGE.queues.PRIORITY_QUEUE;
#if TYPE_OBJECT
import speiger.src.collections.objects.utils.ObjectArrays;
#endif
import speiger.src.testers.PACKAGE.generators.TEST_QUEUE_GENERATOR;
import speiger.src.testers.PACKAGE.utils.SAMPLE_ELEMENTS;

@SuppressWarnings("javadoc")
public class SIMPLE_QUEUE_TEST_GENERATOR KEY_GENERIC_TYPE implements TEST_QUEUE_GENERATOR KEY_GENERIC_TYPE
{
	Function<KEY_TYPE[], PRIORITY_QUEUE KEY_GENERIC_TYPE> mapper;
#if TYPE_OBJECT
	KEY_TYPE[] keys;
#endif
	
	public SIMPLE_QUEUE_TEST_GENERATOR(Function<KEY_TYPE[], PRIORITY_QUEUE KEY_GENERIC_TYPE> mapper) {
		this.mapper = mapper;
	}
	
#if TYPE_OBJECT
	public SIMPLE_QUEUE_TEST_GENERATOR KEY_GENERIC_TYPE setElements(KEY_TYPE...keys) {
		this.keys = keys;
		return this;
	}
	
#endif
	public SAMPLE_ELEMENTS KEY_GENERIC_TYPE getSamples() {
#if TYPE_BOOLEAN
		return new SAMPLE_ELEMENTS(true, false, true, false, true);
#else if TYPE_BYTE
		return new SAMPLE_ELEMENTS((byte)0, (byte)1, (byte)2, (byte)3, (byte)4);
#else if TYPE_SHORT
		return new SAMPLE_ELEMENTS((short)0, (short)1, (short)2, (short)3, (short)4);
#else if TYPE_CHAR
		return new SAMPLE_ELEMENTS((char)0, (char)1, (char)2, (char)3, (char)4);
#else if TYPE_OBJECT
		return new SAMPLE_ELEMENTSBRACES(keys[0], keys[1], keys[2], keys[3], keys[4]);
#else
		return new SAMPLE_ELEMENTS(0, 1, 2, 3, 4);
#endif
	}
	
#if !TYPE_OBJECT
	public PRIORITY_QUEUE KEY_GENERIC_TYPE create(KEY_TYPE... elements) {
		return mapper.apply(elements);
	}
	
	public PRIORITY_QUEUE KEY_GENERIC_TYPE create(Object... elements) {
		KEY_TYPE[] array = NEW_KEY_ARRAY(elements.length);
		int i = 0;
		for (Object e : elements) {
			array[i++] = CLASS_TO_KEY(e);
		}
		return mapper.apply(array);
	}
	
#else
	public PRIORITY_QUEUE KEY_GENERIC_TYPE create(Object... elements) {
		T[] array = (T[])ObjectArrays.newArray(keys[0].getClass(), elements.length);
		int i = 0;
		for (Object e : elements) {
			array[i++] = CLASS_TO_KEY(e);
		}
		return mapper.apply(array);
	}

#endif
	public ITERABLE KEY_GENERIC_TYPE order(LIST KEY_GENERIC_TYPE insertionOrder) {
		return insertionOrder;
	}
	
	public Iterable<CLASS_TYPE> order(List<CLASS_TYPE> insertionOrder) {
		return insertionOrder;
	}
}