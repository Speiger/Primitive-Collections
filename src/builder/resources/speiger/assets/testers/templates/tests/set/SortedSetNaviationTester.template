package speiger.src.testers.PACKAGE.tests.set;

import org.junit.Ignore;

#ignore
import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE;
import static com.google.common.collect.testing.features.CollectionSize.ONE;
import static com.google.common.collect.testing.features.CollectionSize.SEVERAL;
import static com.google.common.collect.testing.features.CollectionSize.ZERO;
#endignore

import java.util.NoSuchElementException;

import com.google.common.collect.testing.features.CollectionFeature;
import com.google.common.collect.testing.features.CollectionSize;

import speiger.src.collections.PACKAGE.lists.LIST;
import speiger.src.collections.PACKAGE.sets.SORTED_SET;
import speiger.src.testers.PACKAGE.tests.base.ABSTRACT_SET_TESTER;
import speiger.src.testers.PACKAGE.utils.HELPERS;

@Ignore
@SuppressWarnings("javadoc")
public class FILE_KEY_TYPESortedSetNaviationTester KEY_GENERIC_TYPE extends ABSTRACT_SET_TESTER KEY_GENERIC_TYPE
{
	private SORTED_SET KEY_GENERIC_TYPE sortedSet;
	private LIST KEY_GENERIC_TYPE values;
	private KEY_TYPE a;
	private KEY_TYPE c;

	@Override
	public void setUp() throws Exception {
		super.setUp();
		sortedSet = (SORTED_SET KEY_GENERIC_TYPE) getSet();
		values = HELPERS.copyToList(getSampleElements(getSubjectGenerator().getCollectionSize().getNumElements()));
		values.sort(sortedSet.comparator());

		// some tests assume SEVERAL == 3
		if (values.size() >= 1) {
			a = values.GET_KEY(0);
			if (values.size() >= 3) {
				c = values.GET_KEY(2);
			}
		}
	}
	
#ignore
	@CollectionFeature.Require(SUPPORTS_REMOVE)
	@CollectionSize.Require(ZERO)
#endignore
	public void testEmptySetPollFirst() {
#if TYPE_OBJECT
		assertEquals(null, sortedSet.POLL_FIRST_KEY());
#else
		assertEquals(CLASS_TYPE.MAX_VALUE, sortedSet.POLL_FIRST_KEY());
#endif
	}
	
#ignore
	@CollectionFeature.Require(SUPPORTS_REMOVE)
	@CollectionSize.Require(ZERO)
#endignore
	public void testEmptySetPollLast() {
#if TYPE_OBJECT
		assertEquals(null, sortedSet.POLL_LAST_KEY());
#else
		assertEquals(CLASS_TYPE.MIN_VALUE, sortedSet.POLL_LAST_KEY());
#endif
	}
	
#ignore
	@CollectionFeature.Require(SUPPORTS_REMOVE)
	@CollectionSize.Require(ONE)
#endignore
	public void testSingletonSetPollFirst() {
		assertEquals(a, sortedSet.POLL_FIRST_KEY());
		assertTrue(sortedSet.isEmpty());
	}
	
#ignore
	@CollectionFeature.Require(SUPPORTS_REMOVE)
	@CollectionSize.Require(ONE)
#endignore
	public void testSingletonSetPollLast() {
		assertEquals(a, sortedSet.POLL_LAST_KEY());
		assertTrue(sortedSet.isEmpty());
	}
	
#ignore
	@CollectionFeature.Require(SUPPORTS_REMOVE)
	@CollectionSize.Require(SEVERAL)
#endignore
	public void testPollFirst() {
		assertEquals(a, sortedSet.POLL_FIRST_KEY());
		assertEquals(values.subList(1, values.size()), HELPERS.copyToList(sortedSet));
	}

#ignore
	@CollectionFeature.Require(SUPPORTS_REMOVE)
	@CollectionSize.Require(SEVERAL)
#endignore
	public void testPollLast() {
		assertEquals(c, sortedSet.POLL_LAST_KEY());
		assertEquals(values.subList(0, values.size()-1), HELPERS.copyToList(sortedSet));
	}
	
#ignore
	@CollectionFeature.Require(absent = SUPPORTS_REMOVE)
#endignore
	public void testPollFirstUnsupported() {
		try {
			sortedSet.POLL_FIRST_KEY();
			fail();
		} catch (UnsupportedOperationException e) {
		}
	}
	
#ignore
	@CollectionFeature.Require(absent = SUPPORTS_REMOVE)
#endignore
	public void testPollLastUnsupported() {
		try {
			sortedSet.POLL_LAST_KEY();
			fail();
		} catch (UnsupportedOperationException e) {
		}
	}
	
#ignore
	@CollectionSize.Require(ZERO)
#endignore
	public void testEmptySetFirst() {
		try {
			sortedSet.FIRST_KEY();
			fail();
		} catch (NoSuchElementException e) {
		}
	}

#ignore
	@CollectionSize.Require(ZERO)
#endignore
	public void testEmptySetLast() {
		try {
			sortedSet.LAST_KEY();
			fail();
		} catch (NoSuchElementException e) {
		}
	}

#ignore
	@CollectionSize.Require(ONE)
#endignore
	public void testSingletonSetFirst() {
		assertEquals(a, sortedSet.FIRST_KEY());
	}

#ignore
	@CollectionSize.Require(ONE)
#endignore
	public void testSingletonSetLast() {
		assertEquals(a, sortedSet.LAST_KEY());
	}

#ignore
	@CollectionSize.Require(SEVERAL)
#endignore
	public void testFirst() {
		assertEquals(a, sortedSet.FIRST_KEY());
	}

#ignore
	@CollectionSize.Require(SEVERAL)
#endignore
	public void testLast() {
		assertEquals(c, sortedSet.LAST_KEY());
	}
}
