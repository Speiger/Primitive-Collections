package speiger.src.testers.PACKAGE.tests.maps;

#ignore
import static com.google.common.collect.testing.features.CollectionSize.ZERO;
import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;
#endignore
#if !VALUE_BOOLEAN
#ignore
import static com.google.common.collect.testing.features.CollectionSize.ONE;
#endignore
#endif

import org.junit.Ignore;

import com.google.common.collect.testing.features.CollectionSize;
import com.google.common.collect.testing.features.MapFeature;

import junit.framework.AssertionFailedError;
import speiger.src.testers.PACKAGE.tests.base.maps.ABSTRACT_MAP_TESTER;

@Ignore
@SuppressWarnings("javadoc")
public class FILE_KEY_TYPE2FILE_VALUE_TYPEMapSupplyIfAbsentTester KEY_VALUE_GENERIC_TYPE extends ABSTRACT_MAP_TESTER KEY_VALUE_GENERIC_TYPE
{
#ignore
	@MapFeature.Require(SUPPORTS_PUT)
#endignore
	public void testSupplyIfAbsent_supportedAbsent() {
		assertEquals("SUPPLY_IF_ABSENT(notPresent, function) should return new value", v3(),
				getMap().SUPPLY_IF_ABSENT(k3(), this::v3));
		expectAdded(e3());
	}
	
#if !VALUE_BOOLEAN
#ignore
	@MapFeature.Require(SUPPORTS_PUT)
	@CollectionSize.Require(ONE)
#endignore
	public void testSupplyIfAbsent_supportedAbsentFirst() {
		getMap().setDefaultReturnValue(v0());
		assertEquals("SUPPLY_IF_ABSENT(notPresent, function) should return new value", v3(),
			getMap().SUPPLY_IF_ABSENT(k0(), this::v3));
		expectContents(entry(k0(), v3()));
	}
	
#ignore
	@MapFeature.Require(SUPPORTS_PUT)
	@CollectionSize.Require(ONE)
#endignore
	public void testSupplyIfAbsent_supportedAbsentSameResult() {
		getMap().setDefaultReturnValue(v0());
		assertEquals("SUPPLY_IF_ABSENT(notPresent, function) should return new value", v0(),
			getMap().SUPPLY_IF_ABSENT(k0(), this::v0));
		expectUnchanged();
	}
	
#endif
#ignore
	@MapFeature.Require(SUPPORTS_PUT)
	@CollectionSize.Require(absent = ZERO)
#endignore
	public void testSupplyIfAbsent_supportedPresent() {
		assertEquals("SUPPLY_IF_ABSENT(present, function) should return existing value", v0(),
				getMap().SUPPLY_IF_ABSENT(k0(), () -> {
					throw new AssertionFailedError();
				}));
		expectUnchanged();
	}

#ignore
	@MapFeature.Require(SUPPORTS_PUT)
#endignore
	public void testSupplyIfAbsent_functionReturnsNullNotInserted() {
		assertEquals("SUPPLY_IF_ABSENT(absent, returnsNull) should return INVALID_VALUE", INVALID_VALUE, getMap().SUPPLY_IF_ABSENT(k3(), () -> INVALID_VALUE));
		expectUnchanged();
	}

	static class ExpectedException extends RuntimeException {
		private static final long serialVersionUID = 1L;
	}

#ignore
	@MapFeature.Require(SUPPORTS_PUT)
#endignore
	public void testSupplyIfAbsent_functionThrows() {
		try {
			getMap().SUPPLY_IF_ABSENT(k3(), () -> {
				throw new ExpectedException();
			});
			fail("Expected ExpectedException");
		} catch (ExpectedException expected) {
		}
		expectUnchanged();
	}

#ignore
	@MapFeature.Require(absent = SUPPORTS_PUT)
#endignore
	public void testSupplyIfAbsent_unsupportedAbsent() {
		try {
			getMap().SUPPLY_IF_ABSENT(k3(), this::v3);
			fail("SUPPLY_IF_ABSENT(notPresent, function) should throw");
		} catch (UnsupportedOperationException expected) {
		}
		expectUnchanged();
	}

#ignore
	@MapFeature.Require(absent = SUPPORTS_PUT)
	@CollectionSize.Require(absent = ZERO)
#endignore
	public void testSupplyIfAbsent_unsupportedPresentExistingValue() {
		try {
			assertEquals("SUPPLY_IF_ABSENT(present, returnsCurrentValue) should return present or throw", v0(), getMap().SUPPLY_IF_ABSENT(k0(), this::v0));
		} catch (UnsupportedOperationException tolerated) {
		}
		expectUnchanged();
	}

#ignore
	@MapFeature.Require(absent = SUPPORTS_PUT)
	@CollectionSize.Require(absent = ZERO)
#endignore
	public void testSupplyIfAbsent_unsupportedPresentDifferentValue() {
		try {
			assertEquals("SUPPLY_IF_ABSENT(present, returnsDifferentValue) should return present or throw", v0(), getMap().SUPPLY_IF_ABSENT(k0(), this::v3));
		} catch (UnsupportedOperationException tolerated) {
		}
		expectUnchanged();
	}
}
