package speiger.src.testers.PACKAGE.tests.queue;

import org.junit.Ignore;

import com.google.common.collect.testing.features.CollectionFeature;
import com.google.common.collect.testing.features.CollectionSize;

import speiger.src.testers.PACKAGE.tests.base.ABSTRACT_QUEUE_TESTER;

@Ignore
@SuppressWarnings("javadoc")
public class FILE_KEY_TYPEQueueRemoveTester KEY_GENERIC_TYPE extends ABSTRACT_QUEUE_TESTER KEY_GENERIC_TYPE
{
#ignore
	@CollectionFeature.Require(CollectionFeature.SUPPORTS_REMOVE)
#endignore
	public void testRemoveFirst_Missing() {
		assertFalse("Queue.removeFirst(missing) should return false", queue.removeFirst(e3()));
		expectUnchanged();
	}
	
#ignore
	@CollectionFeature.Require(CollectionFeature.SUPPORTS_REMOVE)
	@CollectionSize.Require(absent = CollectionSize.ZERO)
#endignore
	public void testRemoveFirst_Present() {
		assertTrue("Queue.removeFirst(present) should return true", queue.removeFirst(e0()));
		expectMissing(e0());
	}
	
#ignore
	@CollectionFeature.Require(CollectionFeature.SUPPORTS_REMOVE)
#endignore
	public void testRemoveLast_Missing() {
		assertFalse("Queue.removeLast(missing) should return false", queue.removeLast(e3()));
		expectUnchanged();
	}
	
#ignore
	@CollectionFeature.Require(CollectionFeature.SUPPORTS_REMOVE)
	@CollectionSize.Require(absent = CollectionSize.ZERO)
#endignore
	public void testRemoveLast_Present() {
		assertTrue("Queue.removeLast(present) should return true", queue.removeLast(e0()));
		expectMissing(e0());
	}
	
#ignore
	@CollectionFeature.Require(absent = CollectionFeature.SUPPORTS_REMOVE)
#endignore
	public void testRemoveFirst_Unsupported() {
		try {
			queue.removeFirst(e3());
			fail("Queue.removeFirst should throw UnsupportedOperationException");
		}
		catch(UnsupportedOperationException e) {}
		expectUnchanged();
	}
	
#ignore
	@CollectionFeature.Require(absent = CollectionFeature.SUPPORTS_REMOVE)
#endignore
	public void testRemoveLast_Unsupported() {
		try {
			queue.removeLast(e3());
			fail("Queue.removeLast should throw UnsupportedOperationException");
		}
		catch(UnsupportedOperationException e) {}
		expectUnchanged();
	}
}
