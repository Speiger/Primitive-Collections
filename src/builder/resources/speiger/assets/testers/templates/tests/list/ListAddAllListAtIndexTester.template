package speiger.src.testers.PACKAGE.tests.list;

import org.junit.Ignore;

#ignore
import static com.google.common.collect.testing.features.CollectionSize.ONE;
import static com.google.common.collect.testing.features.CollectionSize.ZERO;
import static com.google.common.collect.testing.features.ListFeature.SUPPORTS_ADD_WITH_INDEX;
#endignore

import com.google.common.collect.testing.features.CollectionSize;
import com.google.common.collect.testing.features.ListFeature;

import speiger.src.collections.PACKAGE.lists.ARRAY_LIST;
import speiger.src.collections.PACKAGE.lists.LIST;
import speiger.src.testers.PACKAGE.tests.base.ABSTRACT_LIST_TESTER;

@Ignore
@SuppressWarnings("javadoc")
public class FILE_KEY_TYPEListAddAllListAtIndexTester KEY_GENERIC_TYPE extends ABSTRACT_LIST_TESTER KEY_GENERIC_TYPE
{
#ignore
	@ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)
	@CollectionSize.Require(absent = ZERO)
#endignore
	public void testAddAllListAtIndex_supportedAllPresent() {
		assertTrue("addAll(n, allPresent) should return true", getList().addAll(0, ARRAY_LIST.wrap(e0())));
		expectAddedIndex(0, e0());
	}

#ignore
	@ListFeature.Require(absent = SUPPORTS_ADD_WITH_INDEX)
	@CollectionSize.Require(absent = ZERO)
#endignore
	public void testAddAllListAtIndex_unsupportedAllPresent() {
		try {
			getList().addAll(0, ARRAY_LIST.wrap(e0()));
			fail("addAll(n, allPresent) should throw");
		} catch (UnsupportedOperationException expected) {
		}
		expectUnchanged();
	}

#ignore
	@ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)
	@CollectionSize.Require(absent = ZERO)
#endignore
	public void testAddAllListAtIndex_supportedSomePresent() {
		assertTrue("addAll(n, allPresent) should return true", getList().addAll(0, ARRAY_LIST.wrap(e0(), e3())));
		expectAddedIndex(0, e0(), e3());
	}

#ignore
	@ListFeature.Require(absent = SUPPORTS_ADD_WITH_INDEX)
	@CollectionSize.Require(absent = ZERO)
#endignore
	public void testAddAllListAtIndex_unsupportedSomePresent() {
		try {
			getList().addAll(0, ARRAY_LIST.wrap(e0(), e3()));
			fail("addAll(n, allPresent) should throw");
		} catch (UnsupportedOperationException expected) {
		}
		expectUnchanged();
#if !TYPE_BOOLEAN
		expectMissing(e3());
#endif
	}

#ignore
	@ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)
#endignore
	public void testAddAllListAtIndex_supportedNothing() {
		assertFalse("addAll(n, nothing) should return false", getList().addAll(0, new ARRAY_LISTBRACES()));
		expectUnchanged();
	}

#ignore
	@ListFeature.Require(absent = SUPPORTS_ADD_WITH_INDEX)
#endignore
	public void testAddAllListAtIndex_unsupportedNothing() {
		try {
			assertFalse("addAll(n, nothing) should return false or throw", getList().addAll(0, new ARRAY_LISTBRACES()));
		} catch (UnsupportedOperationException tolerated) {
		}
		expectUnchanged();
	}

#ignore
	@ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)
#endignore
	public void testAddAllListAtIndex_withDuplicates() {
		assertTrue("addAll(n, hasDuplicates) should return true", getList().addAll(0, ARRAY_LIST.wrap(e0(), e1(), e0(), e1())));
		expectAddedIndex(0, e0(), e1(), e0(), e1());
	}

#ignore
	@ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)
	@CollectionSize.Require(absent = { ZERO, ONE })
#endignore
	public void testAddAllListAtIndex_middle() {
		assertTrue("addAll(middle, disjoint) should return true", getList().addAll(getNumElements() / 2, new ARRAY_LISTBRACES(createDisjointCollection())));
		expectAdded(getNumElements() / 2, createDisjointCollection());
	}

#ignore
	@ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)
	@CollectionSize.Require(absent = ZERO)
#endignore
	public void testAddAllListAtIndex_end() {
		assertTrue("addAll(end, disjoint) should return true", getList().addAll(getNumElements(), new ARRAY_LISTBRACES(createDisjointCollection())));
		expectAdded(getNumElements(), createDisjointCollection());
	}
	
#ignore
	@ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)
#endignore
	public void testAddAllListAtIndex_nullListReference() {
		try {
			getList().addAll(0, (LIST KEY_GENERIC_TYPE)null);
			fail("addAll(n, null) should throw");
		} catch (NullPointerException expected) {
		}
		expectUnchanged();
	}

#ignore
	@ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)
#endignore
	public void testAddAllListAtIndex_negative() {
		try {
			getList().addAll(-1, ARRAY_LIST.wrap(e3()));
			fail("addAll(-1, e) should throw");
		} catch (IndexOutOfBoundsException expected) {
		}
		expectUnchanged();
#if !TYPE_BOOLEAN
		expectMissing(e3());
#endif
	}

#ignore
	@ListFeature.Require(SUPPORTS_ADD_WITH_INDEX)
#endignore
	public void testAddAllListAtIndex_tooLarge() {
		try {
			getList().addAll(getNumElements() + 1, ARRAY_LIST.wrap(e3()));
			fail("addAll(size + 1, e) should throw");
		} catch (IndexOutOfBoundsException expected) {
		}
		expectUnchanged();
#if !TYPE_BOOLEAN
		expectMissing(e3());
#endif
	}
}
