package speiger.src.testers.PACKAGE.tests.maps;

import java.util.AbstractMap;

import org.junit.Ignore;

import com.google.common.collect.testing.features.CollectionSize;

import speiger.src.collections.PACKAGE.maps.impl.hash.HASH_MAP;
import speiger.src.collections.PACKAGE.maps.interfaces.MAP;
import speiger.src.collections.objects.collections.ObjectCollection;
import speiger.src.testers.PACKAGE.tests.base.maps.ABSTRACT_MAP_TESTER;
import speiger.src.testers.objects.utils.ObjectHelpers;

@Ignore
@SuppressWarnings("javadoc")
public class FILE_KEY_TYPE2FILE_VALUE_TYPEMapEqualsTester KEY_VALUE_GENERIC_TYPE extends ABSTRACT_MAP_TESTER KEY_VALUE_GENERIC_TYPE 
{
	public void testEquals_otherMapWithSameEntries() {
		assertTrue("A Map should equal any other Map containing the same entries.", getMap().equals(newHashMap(getSampleEntries())));
	}

#ignore
	@CollectionSize.Require(absent = CollectionSize.ZERO)
#endignore
	public void testEquals_otherMapWithDifferentEntries() {
		MAP KEY_VALUE_GENERIC_TYPE other = newHashMap(getSampleEntries(getNumEntries() - 1));
		other.put(k3(), v3());
		assertFalse("A Map should not equal another Map containing different entries.", getMap().equals(other));
	}
	
#ignore
	@CollectionSize.Require(absent = CollectionSize.ZERO)
#endignore
	public void testEquals_smallerMap() {
		ObjectCollection<MAP.Entry KEY_VALUE_GENERIC_TYPE> fewerEntries = getSampleEntries(getNumEntries() - 1);
		assertFalse("Maps of different sizes should not be equal.", getMap().equals(newHashMap(fewerEntries)));
	}

	public void testEquals_largerMap() {
		ObjectCollection<MAP.Entry KEY_VALUE_GENERIC_TYPE> moreEntries = getSampleEntries(getNumEntries() + 1);
		assertFalse("Maps of different sizes should not be equal.", getMap().equals(newHashMap(moreEntries)));
	}

	public void testEquals_list() {
		assertFalse("A List should never equal a Map.", getMap().equals(ObjectHelpers.copyToList(getMap().ENTRY_SET())));
	}
	
#ignore
	@CollectionSize.Require(CollectionSize.ONE)
#endignore
	public void testEquals_EntryMatches() {
		MAP.Entry KEY_VALUE_GENERIC_TYPE entry = e0();
		assertEquals("The Entries should match", entry, getMap().ENTRY_SET().iterator().next());
	}

#ignore
	@CollectionSize.Require(CollectionSize.ONE)
#endignore
	public void testEquals_EntryMatchesObject() {
		MAP.Entry KEY_VALUE_GENERIC_TYPE entry = e0();
		assertEquals("The Entries should match", new AbstractMap.SimpleEntry<>(entry), getMap().ENTRY_SET().iterator().next());
	}
	
#ignore
	@CollectionSize.Require(CollectionSize.ONE)
#endignore
	public void testEquals_EntryNotMatches() {
		MAP.Entry KEY_VALUE_GENERIC_TYPE entry = e3();
		assertFalse("The Entries should match", getMap().ENTRY_SET().iterator().next().equals(entry));
	}
	
#ignore
	@CollectionSize.Require(CollectionSize.ONE)
#endignore
	public void testEquals_EntryNotMatchesObject() {
		MAP.Entry KEY_VALUE_GENERIC_TYPE entry = e3();
		assertFalse("The Entries should match", getMap().ENTRY_SET().iterator().next().equals(new AbstractMap.SimpleEntry<>(entry)));
	}
	
#ignore
	@CollectionSize.Require(CollectionSize.ONE)
#endignore
	public void testEquals_EntryNotMatchingNull() {
		assertFalse("The Entries should match", getMap().ENTRY_SET().iterator().next().equals(null));
	}
	
	private static GENERIC_KEY_VALUE_BRACES MAP KEY_VALUE_GENERIC_TYPE newHashMap(ObjectCollection<? extends MAP.Entry KEY_VALUE_GENERIC_TYPE> entries) {
		MAP KEY_VALUE_GENERIC_TYPE map = new HASH_MAPKV_BRACES();
		for (MAP.Entry KEY_VALUE_GENERIC_TYPE entry : entries) {
			map.put(entry.ENTRY_KEY(), entry.ENTRY_VALUE());
		}
		return map;
	}
}
