package speiger.src.testers.PACKAGE.utils;

#if TYPE_OBJECT
import java.util.Objects;
#endif

import speiger.src.collections.PACKAGE.collections.ITERABLE;
import speiger.src.collections.PACKAGE.collections.ITERATOR;
import speiger.src.collections.PACKAGE.lists.ARRAY_LIST;
import speiger.src.collections.PACKAGE.lists.LIST;
import speiger.src.collections.PACKAGE.sets.SET;

@SuppressWarnings("javadoc")
public class MINIMAL_SET KEY_GENERIC_TYPE extends MINIMAL_COLLECTION KEY_GENERIC_TYPE implements SET KEY_GENERIC_TYPE {
	public static GENERIC_KEY_BRACES MINIMAL_SET KEY_GENERIC_TYPE of(KEY_TYPE...array) {
		return MINIMAL_SET.of(ARRAY_LIST.wrap(array));
	}
	
	public static GENERIC_KEY_BRACES MINIMAL_SET KEY_GENERIC_TYPE of(ITERABLE KEY_GENERIC_TYPE iterable)
	{
		LIST KEY_GENERIC_TYPE list = new ARRAY_LISTBRACES();
		for(ITERATOR KEY_GENERIC_TYPE iter = iterable.iterator();iter.hasNext();)
		{
			KEY_TYPE key = iter.NEXT();
			if(list.contains(key)) continue;
			list.add(key);
		}
		return new MINIMAL_SETBRACES(list.TO_ARRAY(NEW_KEY_ARRAY(list.size())));
	}
	
	protected MINIMAL_SET(KEY_TYPE[] contents) {
		super(contents);
	}
	
	@Override
	public SET KEY_GENERIC_TYPE copy() { throw new UnsupportedOperationException(); }
	
#if TYPE_OBJECT
	@Override
	public T addOrGet(T o) { throw new UnsupportedOperationException(); }
	
#endif
	@Override
	public boolean equals(Object object) {
		if (object instanceof SET) {
			SET KEY_GENERIC_TYPE that = (SET KEY_GENERIC_TYPE) object;
			return (size() == that.size()) && this.containsAll(that);
		}
		return false;
	}

	@Override
	public int hashCode() {
		int hashCodeSum = 0;
		for (ITERATOR KEY_GENERIC_TYPE iter = iterator();iter.hasNext();) {
			hashCodeSum += KEY_TO_HASH(iter.NEXT());
		}
		return hashCodeSum;
	}

#if TYPE_OBJECT
	@Override
	public boolean remove(Object o) {
		for(ITERATOR KEY_GENERIC_TYPE iter = iterator();iter.hasNext();) {
			if(KEY_EQUALS(iter.NEXT(), o)) {
				iter.remove();
				return true;
			}
		}
		return false;
	}
#else
	@Override
	public boolean remove(KEY_TYPE o) {
		for(ITERATOR KEY_GENERIC_TYPE iter = iterator();iter.hasNext();) {
			if(KEY_EQUALS(iter.NEXT(), o)) {
				iter.remove();
				return true;
			}
		}
		return false;
	}
#endif
}
